// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

#ifndef _BEHAVIAC_AGENT_DOMINANT_H_
#define _BEHAVIAC_AGENT_DOMINANT_H_

#include "behaviac_headers.h"

///<<< BEGIN WRITING YOUR CODE FILE_INIT
void LCM_Handler_thread(lcm::LCM& lcmplan);
///<<< END WRITING YOUR CODE

class Agent_Dominant : public behaviac::Agent
///<<< BEGIN WRITING YOUR CODE Agent_Dominant
///<<< END WRITING YOUR CODE
{
public:
	Agent_Dominant();
	virtual ~Agent_Dominant();

	BEHAVIAC_DECLARE_AGENTTYPE(Agent_Dominant, behaviac::Agent)

	private: LaneIdx currentLane;

	private: DriveState currentState;

	public: Plan_Frame environment;

	private: DriveState lastState;

	public: DriveState m5Gstate;

	public: double min_collision_time;

	public: PlanConfig planConfig;

	private: System_Status systemStatus;

	public: behaviac::EBTStatus Action();

	public: behaviac::EBTStatus Avoidance();

	public: behaviac::EBTStatus ChangingLane();

	public: bool collision_time_feasibleforchange();

	public: behaviac::EBTStatus Estop();

	public: void find_5G_EstopSpeed();

	public: bool find_5G_FollowingPath();

	public: void find_5G_FollowingSpeed();

	public: bool find_advice_speed();

	public: bool find_change_path();

	public: behaviac::EBTStatus FollowingFrontCar();

	public: void HandleFrame();

	public: bool I_need_to_changelane();

	public: bool I_want_to_changlane();

	public: bool Im_able_to_changelane();

	public: bool is_5G_Event();

	public: bool is_5G_Front_Car();

	public: bool is_change_finished();

	public: bool is_on_planned_path(double& collsion_time);

	public: bool is_on_predict_path(double& collision_time);

	public: bool is_other_lane();

	public: bool is_other_lane_free();

	public: bool is_speed_lower_than(const double spd);

	public: bool is_stopline_close();

	public: bool is_traffice_red();

	public: bool isEstop();

	public: bool isPathRunout(const double dis_set);

	public: behaviac::EBTStatus Move();

	public: bool no_collision_or_collision_far_away();

	public: System_Status System_Check();

	public: behaviac::EBTStatus Tracking();

	public: behaviac::EBTStatus TrackingLane();

///<<< BEGIN WRITING YOUR CODE CLASS_PART
public:
	bool init();
	bool initLCM();
#ifdef _WIN32
	bool initConfig(_In_ LPCWSTR xmlFilePath);
#else
	bool initConfig(const std::string& fileName);
#endif
	std::vector<Static_Object>previous_static_objs;
	std::vector<Static_Object>previous_moving_objs;
	std::shared_ptr<spdlog::logger>& getLogger() {
		return PlannerLogger;
	}
	const PacketPlan get_publish_Path()const{
		return path_publish;
	}
	const Trajectory getTrajectory()const{
         return trajectory_;
	}
	void setTrajectory(const Trajectory& src){
		trajectory_.clear();
		lock_.Lock();
		trajectory_=src;
		lock_.UnLock();
	}
	void setPath(const PacketPlan&src){
		path_publish=src;
	}
	const PacketSpeedRequest getSpeedRequest()const{
		return speed_publish;
	}
	void setSpeedRequest(const PacketSpeedRequest&src){
		speed_publish=src;
	}
    const int getCurrentState()const{
        return static_cast<int>(currentState);
    }
	lcm::LCM& getLCM(){
		return PlannerLCM;
	}
	Message_Handler& getMessage_Handler(){
		return handlerObject;
	}
	const Raw_Frame getRawFrame() {
		return rawFrame;
	}
    int getMax_Speed(const uint8_t mapFlag);

	WorldMap gMap;
    long time_since_last=0;
    long time_since_last_spd=0;
	/************************************************************************/
	/************************************************************************/
    bool isNewEvent=false;
    bool isNewOtherCar=false;
    bool isNewSlam=false;
    bool isNewGPS=false;
    bool isNewCAN=false;
	double dis_after_change=999.0;
    void Set_New_Flags();
    //多车
	V2XCommItf::PacketOtherVehicleData_list otherVehicleData_list;
	V2XCommItf::PacketIncomingEventData incomingEventData;
	int32_t  platoonID=0;
	int32_t  platoonPos=0;
    int othercarID=0;
	bool firstEvent=true;
	double eventX=0.0;
	double eventY=0.0;
    double EventDis=0.0;
    double EventDis_when_received=0.0;
    double othercarX=0.0;
    double othercarY=0.0;
    double CarDis=0.0;
    std::list<double>frontcarlat, frontcarlon;//保存前车历史gps位置
    vector<double>frontcarX, frontcarY;//保存前车历史位置

	DriveState Handle_5G();
    std::string getCurrentState();
	/************************************************************************/
	/************************************************************************/
    time_point<high_resolution_clock>last_publish_time = high_resolution_clock::now();
    int sent_interval=0;
private:

	std::shared_ptr<spdlog::logger> PlannerLogger = spdlog::stdout_color_mt("Plan");//Log日志
	lcm::LCM PlannerLCM{ "udpm://239.255.76.67:7667?ttl=1" };//通讯工具
	Message_Handler handlerObject;
	CommonThreadLock lock_;//更新数据加锁
    time_point<high_resolution_clock>last_publish_time_spd = high_resolution_clock::now();

	/****************帮助决策的变量************************************/
    double min_collision_dis=999.0;
    double min_collision_time_on_plannedpath=-1.0;
	int speed_limit_kmh=40.0;
	int speed_request=0.0;
    Raw_Frame rawFrame;
	/*****************************************************/
	PacketPlan path_publish;
	PacketSpeedRequest speed_publish;
	Trajectory trajectory_;
    //DECLARE_SINGLETON(Agent_Dominant);
///<<< END WRITING YOUR CODE
};

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

#endif
