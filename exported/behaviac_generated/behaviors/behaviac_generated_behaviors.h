// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// ---------------------------------------------------------------------

#ifndef _BEHAVIAC_GENERATED_BEHAVIORS_H_
#define _BEHAVIAC_GENERATED_BEHAVIORS_H_

#include "../types/behaviac_types.h"

namespace behaviac
{
	// Source file: BT_Dominant

	class Parallel_bt_BT_Dominant_node0 : public Parallel
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Parallel_bt_BT_Dominant_node0, Parallel);
		Parallel_bt_BT_Dominant_node0()
		{
			m_failPolicy = FAIL_ON_ALL;
			m_succeedPolicy = SUCCEED_ON_ONE;
			m_exitPolicy = EXIT_ABORT_RUNNINGSIBLINGS;
			m_childFinishPolicy = CHILDFINISH_LOOP;
		}
	protected:
	};

	class Action_bt_BT_Dominant_node1 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node1, Action);
		Action_bt_BT_Dominant_node1()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((Agent_Dominant*)pAgent)->HandleFrame();
			return BT_SUCCESS;
		}
	};

	class Condition_bt_BT_Dominant_node10 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node10, Condition);
		Condition_bt_BT_Dominant_node10()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool opl = ((Agent_Dominant*)pAgent)->isEstop();
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_BT_Dominant_node6 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node6, Condition);
		Condition_bt_BT_Dominant_node6()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			System_Status& opl = ((Agent_Dominant*)pAgent)->_Get_Property_<PROPERTY_TYPE_Agent_Dominant_systemStatus, System_Status >();
			System_Status opr = communication_error;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_BT_Dominant_node11 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node11, Action);
		Action_bt_BT_Dominant_node11()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((Agent_Dominant*)pAgent)->Estop();
			return result;
		}
	};

	class Condition_bt_BT_Dominant_node44 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node44, Condition);
		Condition_bt_BT_Dominant_node44()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			DriveState& opl = ((Agent_Dominant*)pAgent)->_Get_Property_<PROPERTY_TYPE_Agent_Dominant_currentState, DriveState >();
			DriveState opr = Tracking;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_BT_Dominant_node12 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node12, Action);
		Action_bt_BT_Dominant_node12()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((Agent_Dominant*)pAgent)->find_advice_speed();
			return BT_SUCCESS;
		}
	};

	class Condition_bt_BT_Dominant_node42 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node42, Condition);
		Condition_bt_BT_Dominant_node42()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			DriveState& opl = ((Agent_Dominant*)pAgent)->m5Gstate;
			DriveState opr = Estop;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_BT_Dominant_node47 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node47, Action);
		Action_bt_BT_Dominant_node47()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((Agent_Dominant*)pAgent)->find_5G_EstopSpeed();
			return BT_SUCCESS;
		}
	};

	class Condition_bt_BT_Dominant_node43 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node43, Condition);
		Condition_bt_BT_Dominant_node43()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			DriveState& opl = ((Agent_Dominant*)pAgent)->m5Gstate;
			DriveState opr = Following;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_BT_Dominant_node45 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node45, Action);
		Action_bt_BT_Dominant_node45()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			((Agent_Dominant*)pAgent)->find_5G_FollowingSpeed();
			return BT_SUCCESS;
		}
	};

	class Condition_bt_BT_Dominant_node32 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node32, Condition);
		Condition_bt_BT_Dominant_node32()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			DriveState& opl = ((Agent_Dominant*)pAgent)->m5Gstate;
			DriveState opr = Following;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_BT_Dominant_node33 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node33, Action);
		Action_bt_BT_Dominant_node33()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((Agent_Dominant*)pAgent)->FollowingFrontCar();
			return result;
		}
	};

	class Action_bt_BT_Dominant_node35 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node35, Action);
		Action_bt_BT_Dominant_node35()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((Agent_Dominant*)pAgent)->Action();
			return result;
		}
	};

	class Condition_bt_BT_Dominant_node8 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node8, Condition);
		Condition_bt_BT_Dominant_node8()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			LaneIdx& opl = ((Agent_Dominant*)pAgent)->_Get_Property_<PROPERTY_TYPE_Agent_Dominant_currentLane, LaneIdx >();
			LaneIdx opr = Mid;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_BT_Dominant_node20 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node20, Condition);
		Condition_bt_BT_Dominant_node20()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool opl = ((Agent_Dominant*)pAgent)->no_collision_or_collision_far_away();
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_BT_Dominant_node15 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node15, Action);
		Action_bt_BT_Dominant_node15()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((Agent_Dominant*)pAgent)->Tracking();
			return result;
		}
	};

	class Action_bt_BT_Dominant_node26 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node26, Action);
		Action_bt_BT_Dominant_node26()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((Agent_Dominant*)pAgent)->Action();
			return result;
		}
	};

	class Condition_bt_BT_Dominant_node30 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node30, Condition);
		Condition_bt_BT_Dominant_node30()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool opl = ((Agent_Dominant*)pAgent)->I_want_to_changlane();
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_BT_Dominant_node19 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node19, Condition);
		Condition_bt_BT_Dominant_node19()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool opl = ((Agent_Dominant*)pAgent)->I_need_to_changelane();
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_BT_Dominant_node31 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node31, Condition);
		Condition_bt_BT_Dominant_node31()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool opl = ((Agent_Dominant*)pAgent)->Im_able_to_changelane();
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_BT_Dominant_node34 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node34, Action);
		Action_bt_BT_Dominant_node34()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((Agent_Dominant*)pAgent)->Action();
			return result;
		}
	};

	class Action_bt_BT_Dominant_node16 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node16, Action);
		Action_bt_BT_Dominant_node16()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((Agent_Dominant*)pAgent)->ChangingLane();
			return result;
		}
	};

	class Condition_bt_BT_Dominant_node23 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node23, Condition);
		Condition_bt_BT_Dominant_node23()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			LaneIdx& opl = ((Agent_Dominant*)pAgent)->_Get_Property_<PROPERTY_TYPE_Agent_Dominant_currentLane, LaneIdx >();
			LaneIdx opr = Mid;
			bool op = !PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_BT_Dominant_node24 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node24, Condition);
		Condition_bt_BT_Dominant_node24()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool opl = ((Agent_Dominant*)pAgent)->no_collision_or_collision_far_away();
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Condition_bt_BT_Dominant_node37 : public Condition
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Condition_bt_BT_Dominant_node37, Condition);
		Condition_bt_BT_Dominant_node37()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			bool opl = ((Agent_Dominant*)pAgent)->is_other_lane();
			bool opr = true;
			bool op = PrivateDetails::Equal(opl, opr);
			return op ? BT_SUCCESS : BT_FAILURE;
		}
	};

	class Action_bt_BT_Dominant_node17 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node17, Action);
		Action_bt_BT_Dominant_node17()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((Agent_Dominant*)pAgent)->TrackingLane();
			return result;
		}
	};

	class Action_bt_BT_Dominant_node25 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node25, Action);
		Action_bt_BT_Dominant_node25()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((Agent_Dominant*)pAgent)->Action();
			return result;
		}
	};

	class Action_bt_BT_Dominant_node14 : public Action
	{
	public:
		BEHAVIAC_DECLARE_DYNAMIC_TYPE(Action_bt_BT_Dominant_node14, Action);
		Action_bt_BT_Dominant_node14()
		{
		}
	protected:
		virtual EBTStatus update_impl(Agent* pAgent, EBTStatus childStatus)
		{
			BEHAVIAC_UNUSED_VAR(pAgent);
			BEHAVIAC_UNUSED_VAR(childStatus);
			behaviac::EBTStatus result = ((Agent_Dominant*)pAgent)->Move();
			return result;
		}
	};

	class bt_BT_Dominant
	{
	public:
		static bool Create(BehaviorTree* pBT)
		{
			pBT->SetClassNameString("BehaviorTree");
			pBT->SetId((uint16_t)-1);
			pBT->SetName("BT_Dominant");
			pBT->SetIsFSM(false);
#if !BEHAVIAC_RELEASE
			pBT->SetAgentType("Agent_Dominant");
#endif
			// children
			{
				Parallel_bt_BT_Dominant_node0* node0 = BEHAVIAC_NEW Parallel_bt_BT_Dominant_node0;
				node0->SetClassNameString("Parallel");
				node0->SetId(0);
#if !BEHAVIAC_RELEASE
				node0->SetAgentType("Agent_Dominant");
#endif
				pBT->AddChild(node0);
				{
					Action_bt_BT_Dominant_node1* node1 = BEHAVIAC_NEW Action_bt_BT_Dominant_node1;
					node1->SetClassNameString("Action");
					node1->SetId(1);
#if !BEHAVIAC_RELEASE
					node1->SetAgentType("Agent_Dominant");
#endif
					node0->AddChild(node1);
					node0->SetHasEvents(node0->HasEvents() | node1->HasEvents());
				}
				{
					Selector* node3 = BEHAVIAC_NEW Selector;
					node3->SetClassNameString("Selector");
					node3->SetId(3);
#if !BEHAVIAC_RELEASE
					node3->SetAgentType("Agent_Dominant");
#endif
					node0->AddChild(node3);
					{
						Sequence* node9 = BEHAVIAC_NEW Sequence;
						node9->SetClassNameString("Sequence");
						node9->SetId(9);
#if !BEHAVIAC_RELEASE
						node9->SetAgentType("Agent_Dominant");
#endif
						node3->AddChild(node9);
						{
							Or* node18 = BEHAVIAC_NEW Or;
							node18->SetClassNameString("Or");
							node18->SetId(18);
#if !BEHAVIAC_RELEASE
							node18->SetAgentType("Agent_Dominant");
#endif
							node9->AddChild(node18);
							{
								Condition_bt_BT_Dominant_node10* node10 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node10;
								node10->SetClassNameString("Condition");
								node10->SetId(10);
#if !BEHAVIAC_RELEASE
								node10->SetAgentType("Agent_Dominant");
#endif
								node18->AddChild(node10);
								node18->SetHasEvents(node18->HasEvents() | node10->HasEvents());
							}
							{
								Condition_bt_BT_Dominant_node6* node6 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node6;
								node6->SetClassNameString("Condition");
								node6->SetId(6);
#if !BEHAVIAC_RELEASE
								node6->SetAgentType("Agent_Dominant");
#endif
								node18->AddChild(node6);
								node18->SetHasEvents(node18->HasEvents() | node6->HasEvents());
							}
							node9->SetHasEvents(node9->HasEvents() | node18->HasEvents());
						}
						{
							Action_bt_BT_Dominant_node11* node11 = BEHAVIAC_NEW Action_bt_BT_Dominant_node11;
							node11->SetClassNameString("Action");
							node11->SetId(11);
#if !BEHAVIAC_RELEASE
							node11->SetAgentType("Agent_Dominant");
#endif
							node9->AddChild(node11);
							node9->SetHasEvents(node9->HasEvents() | node11->HasEvents());
						}
						node3->SetHasEvents(node3->HasEvents() | node9->HasEvents());
					}
					{
						Sequence* node5 = BEHAVIAC_NEW Sequence;
						node5->SetClassNameString("Sequence");
						node5->SetId(5);
#if !BEHAVIAC_RELEASE
						node5->SetAgentType("Agent_Dominant");
#endif
						node3->AddChild(node5);
						{
							Selector* node48 = BEHAVIAC_NEW Selector;
							node48->SetClassNameString("Selector");
							node48->SetId(48);
#if !BEHAVIAC_RELEASE
							node48->SetAgentType("Agent_Dominant");
#endif
							node5->AddChild(node48);
							{
								Sequence* node2 = BEHAVIAC_NEW Sequence;
								node2->SetClassNameString("Sequence");
								node2->SetId(2);
#if !BEHAVIAC_RELEASE
								node2->SetAgentType("Agent_Dominant");
#endif
								node48->AddChild(node2);
								{
									Condition_bt_BT_Dominant_node44* node44 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node44;
									node44->SetClassNameString("Condition");
									node44->SetId(44);
#if !BEHAVIAC_RELEASE
									node44->SetAgentType("Agent_Dominant");
#endif
									node2->AddChild(node44);
									node2->SetHasEvents(node2->HasEvents() | node44->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node12* node12 = BEHAVIAC_NEW Action_bt_BT_Dominant_node12;
									node12->SetClassNameString("Action");
									node12->SetId(12);
#if !BEHAVIAC_RELEASE
									node12->SetAgentType("Agent_Dominant");
#endif
									node2->AddChild(node12);
									node2->SetHasEvents(node2->HasEvents() | node12->HasEvents());
								}
								node48->SetHasEvents(node48->HasEvents() | node2->HasEvents());
							}
							{
								Sequence* node40 = BEHAVIAC_NEW Sequence;
								node40->SetClassNameString("Sequence");
								node40->SetId(40);
#if !BEHAVIAC_RELEASE
								node40->SetAgentType("Agent_Dominant");
#endif
								node48->AddChild(node40);
								{
									Condition_bt_BT_Dominant_node42* node42 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node42;
									node42->SetClassNameString("Condition");
									node42->SetId(42);
#if !BEHAVIAC_RELEASE
									node42->SetAgentType("Agent_Dominant");
#endif
									node40->AddChild(node42);
									node40->SetHasEvents(node40->HasEvents() | node42->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node47* node47 = BEHAVIAC_NEW Action_bt_BT_Dominant_node47;
									node47->SetClassNameString("Action");
									node47->SetId(47);
#if !BEHAVIAC_RELEASE
									node47->SetAgentType("Agent_Dominant");
#endif
									node40->AddChild(node47);
									node40->SetHasEvents(node40->HasEvents() | node47->HasEvents());
								}
								node48->SetHasEvents(node48->HasEvents() | node40->HasEvents());
							}
							{
								Sequence* node41 = BEHAVIAC_NEW Sequence;
								node41->SetClassNameString("Sequence");
								node41->SetId(41);
#if !BEHAVIAC_RELEASE
								node41->SetAgentType("Agent_Dominant");
#endif
								node48->AddChild(node41);
								{
									Condition_bt_BT_Dominant_node43* node43 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node43;
									node43->SetClassNameString("Condition");
									node43->SetId(43);
#if !BEHAVIAC_RELEASE
									node43->SetAgentType("Agent_Dominant");
#endif
									node41->AddChild(node43);
									node41->SetHasEvents(node41->HasEvents() | node43->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node45* node45 = BEHAVIAC_NEW Action_bt_BT_Dominant_node45;
									node45->SetClassNameString("Action");
									node45->SetId(45);
#if !BEHAVIAC_RELEASE
									node45->SetAgentType("Agent_Dominant");
#endif
									node41->AddChild(node45);
									node41->SetHasEvents(node41->HasEvents() | node45->HasEvents());
								}
								node48->SetHasEvents(node48->HasEvents() | node41->HasEvents());
							}
							node5->SetHasEvents(node5->HasEvents() | node48->HasEvents());
						}
						{
							Selector* node13 = BEHAVIAC_NEW Selector;
							node13->SetClassNameString("Selector");
							node13->SetId(13);
#if !BEHAVIAC_RELEASE
							node13->SetAgentType("Agent_Dominant");
#endif
							node5->AddChild(node13);
							{
								Sequence* node28 = BEHAVIAC_NEW Sequence;
								node28->SetClassNameString("Sequence");
								node28->SetId(28);
#if !BEHAVIAC_RELEASE
								node28->SetAgentType("Agent_Dominant");
#endif
								node13->AddChild(node28);
								{
									Condition_bt_BT_Dominant_node32* node32 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node32;
									node32->SetClassNameString("Condition");
									node32->SetId(32);
#if !BEHAVIAC_RELEASE
									node32->SetAgentType("Agent_Dominant");
#endif
									node28->AddChild(node32);
									node28->SetHasEvents(node28->HasEvents() | node32->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node33* node33 = BEHAVIAC_NEW Action_bt_BT_Dominant_node33;
									node33->SetClassNameString("Action");
									node33->SetId(33);
#if !BEHAVIAC_RELEASE
									node33->SetAgentType("Agent_Dominant");
#endif
									node28->AddChild(node33);
									node28->SetHasEvents(node28->HasEvents() | node33->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node35* node35 = BEHAVIAC_NEW Action_bt_BT_Dominant_node35;
									node35->SetClassNameString("Action");
									node35->SetId(35);
#if !BEHAVIAC_RELEASE
									node35->SetAgentType("Agent_Dominant");
#endif
									node28->AddChild(node35);
									node28->SetHasEvents(node28->HasEvents() | node35->HasEvents());
								}
								node13->SetHasEvents(node13->HasEvents() | node28->HasEvents());
							}
							{
								Sequence* node4 = BEHAVIAC_NEW Sequence;
								node4->SetClassNameString("Sequence");
								node4->SetId(4);
#if !BEHAVIAC_RELEASE
								node4->SetAgentType("Agent_Dominant");
#endif
								node13->AddChild(node4);
								{
									And* node7 = BEHAVIAC_NEW And;
									node7->SetClassNameString("And");
									node7->SetId(7);
#if !BEHAVIAC_RELEASE
									node7->SetAgentType("Agent_Dominant");
#endif
									node4->AddChild(node7);
									{
										Condition_bt_BT_Dominant_node8* node8 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node8;
										node8->SetClassNameString("Condition");
										node8->SetId(8);
#if !BEHAVIAC_RELEASE
										node8->SetAgentType("Agent_Dominant");
#endif
										node7->AddChild(node8);
										node7->SetHasEvents(node7->HasEvents() | node8->HasEvents());
									}
									{
										Condition_bt_BT_Dominant_node20* node20 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node20;
										node20->SetClassNameString("Condition");
										node20->SetId(20);
#if !BEHAVIAC_RELEASE
										node20->SetAgentType("Agent_Dominant");
#endif
										node7->AddChild(node20);
										node7->SetHasEvents(node7->HasEvents() | node20->HasEvents());
									}
									node4->SetHasEvents(node4->HasEvents() | node7->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node15* node15 = BEHAVIAC_NEW Action_bt_BT_Dominant_node15;
									node15->SetClassNameString("Action");
									node15->SetId(15);
#if !BEHAVIAC_RELEASE
									node15->SetAgentType("Agent_Dominant");
#endif
									node4->AddChild(node15);
									node4->SetHasEvents(node4->HasEvents() | node15->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node26* node26 = BEHAVIAC_NEW Action_bt_BT_Dominant_node26;
									node26->SetClassNameString("Action");
									node26->SetId(26);
#if !BEHAVIAC_RELEASE
									node26->SetAgentType("Agent_Dominant");
#endif
									node4->AddChild(node26);
									node4->SetHasEvents(node4->HasEvents() | node26->HasEvents());
								}
								node13->SetHasEvents(node13->HasEvents() | node4->HasEvents());
							}
							{
								Sequence* node27 = BEHAVIAC_NEW Sequence;
								node27->SetClassNameString("Sequence");
								node27->SetId(27);
#if !BEHAVIAC_RELEASE
								node27->SetAgentType("Agent_Dominant");
#endif
								node13->AddChild(node27);
								{
									And* node46 = BEHAVIAC_NEW And;
									node46->SetClassNameString("And");
									node46->SetId(46);
#if !BEHAVIAC_RELEASE
									node46->SetAgentType("Agent_Dominant");
#endif
									node27->AddChild(node46);
									{
										Or* node29 = BEHAVIAC_NEW Or;
										node29->SetClassNameString("Or");
										node29->SetId(29);
#if !BEHAVIAC_RELEASE
										node29->SetAgentType("Agent_Dominant");
#endif
										node46->AddChild(node29);
										{
											Condition_bt_BT_Dominant_node30* node30 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node30;
											node30->SetClassNameString("Condition");
											node30->SetId(30);
#if !BEHAVIAC_RELEASE
											node30->SetAgentType("Agent_Dominant");
#endif
											node29->AddChild(node30);
											node29->SetHasEvents(node29->HasEvents() | node30->HasEvents());
										}
										{
											Condition_bt_BT_Dominant_node19* node19 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node19;
											node19->SetClassNameString("Condition");
											node19->SetId(19);
#if !BEHAVIAC_RELEASE
											node19->SetAgentType("Agent_Dominant");
#endif
											node29->AddChild(node19);
											node29->SetHasEvents(node29->HasEvents() | node19->HasEvents());
										}
										node46->SetHasEvents(node46->HasEvents() | node29->HasEvents());
									}
									{
										Condition_bt_BT_Dominant_node31* node31 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node31;
										node31->SetClassNameString("Condition");
										node31->SetId(31);
#if !BEHAVIAC_RELEASE
										node31->SetAgentType("Agent_Dominant");
#endif
										node46->AddChild(node31);
										node46->SetHasEvents(node46->HasEvents() | node31->HasEvents());
									}
									node27->SetHasEvents(node27->HasEvents() | node46->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node34* node34 = BEHAVIAC_NEW Action_bt_BT_Dominant_node34;
									node34->SetClassNameString("Action");
									node34->SetId(34);
#if !BEHAVIAC_RELEASE
									node34->SetAgentType("Agent_Dominant");
#endif
									node27->AddChild(node34);
									node27->SetHasEvents(node27->HasEvents() | node34->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node16* node16 = BEHAVIAC_NEW Action_bt_BT_Dominant_node16;
									node16->SetClassNameString("Action");
									node16->SetId(16);
#if !BEHAVIAC_RELEASE
									node16->SetAgentType("Agent_Dominant");
#endif
									node27->AddChild(node16);
									node27->SetHasEvents(node27->HasEvents() | node16->HasEvents());
								}
								node13->SetHasEvents(node13->HasEvents() | node27->HasEvents());
							}
							{
								Sequence* node21 = BEHAVIAC_NEW Sequence;
								node21->SetClassNameString("Sequence");
								node21->SetId(21);
#if !BEHAVIAC_RELEASE
								node21->SetAgentType("Agent_Dominant");
#endif
								node13->AddChild(node21);
								{
									And* node22 = BEHAVIAC_NEW And;
									node22->SetClassNameString("And");
									node22->SetId(22);
#if !BEHAVIAC_RELEASE
									node22->SetAgentType("Agent_Dominant");
#endif
									node21->AddChild(node22);
									{
										Condition_bt_BT_Dominant_node23* node23 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node23;
										node23->SetClassNameString("Condition");
										node23->SetId(23);
#if !BEHAVIAC_RELEASE
										node23->SetAgentType("Agent_Dominant");
#endif
										node22->AddChild(node23);
										node22->SetHasEvents(node22->HasEvents() | node23->HasEvents());
									}
									{
										Condition_bt_BT_Dominant_node24* node24 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node24;
										node24->SetClassNameString("Condition");
										node24->SetId(24);
#if !BEHAVIAC_RELEASE
										node24->SetAgentType("Agent_Dominant");
#endif
										node22->AddChild(node24);
										node22->SetHasEvents(node22->HasEvents() | node24->HasEvents());
									}
									{
										Condition_bt_BT_Dominant_node37* node37 = BEHAVIAC_NEW Condition_bt_BT_Dominant_node37;
										node37->SetClassNameString("Condition");
										node37->SetId(37);
#if !BEHAVIAC_RELEASE
										node37->SetAgentType("Agent_Dominant");
#endif
										node22->AddChild(node37);
										node22->SetHasEvents(node22->HasEvents() | node37->HasEvents());
									}
									node21->SetHasEvents(node21->HasEvents() | node22->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node17* node17 = BEHAVIAC_NEW Action_bt_BT_Dominant_node17;
									node17->SetClassNameString("Action");
									node17->SetId(17);
#if !BEHAVIAC_RELEASE
									node17->SetAgentType("Agent_Dominant");
#endif
									node21->AddChild(node17);
									node21->SetHasEvents(node21->HasEvents() | node17->HasEvents());
								}
								{
									Action_bt_BT_Dominant_node25* node25 = BEHAVIAC_NEW Action_bt_BT_Dominant_node25;
									node25->SetClassNameString("Action");
									node25->SetId(25);
#if !BEHAVIAC_RELEASE
									node25->SetAgentType("Agent_Dominant");
#endif
									node21->AddChild(node25);
									node21->SetHasEvents(node21->HasEvents() | node25->HasEvents());
								}
								node13->SetHasEvents(node13->HasEvents() | node21->HasEvents());
							}
							node5->SetHasEvents(node5->HasEvents() | node13->HasEvents());
						}
						node3->SetHasEvents(node3->HasEvents() | node5->HasEvents());
					}
					node0->SetHasEvents(node0->HasEvents() | node3->HasEvents());
				}
				{
					Action_bt_BT_Dominant_node14* node14 = BEHAVIAC_NEW Action_bt_BT_Dominant_node14;
					node14->SetClassNameString("Action");
					node14->SetId(14);
#if !BEHAVIAC_RELEASE
					node14->SetAgentType("Agent_Dominant");
#endif
					node0->AddChild(node14);
					node0->SetHasEvents(node0->HasEvents() | node14->HasEvents());
				}
				pBT->SetHasEvents(pBT->HasEvents() | node0->HasEvents());
			}
			return true;
		}
	};

}
#endif // _BEHAVIAC_GENERATED_BEHAVIORS_H_
