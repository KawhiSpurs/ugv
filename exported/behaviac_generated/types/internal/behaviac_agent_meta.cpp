// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// ---------------------------------------------------------------------

#include "behaviac/common/meta.h"
#include "behaviac/common/member.h"
#include "behaviac_agent_meta.h"

namespace behaviac
{
	class CInstanceConst_Plan_Frame : public CInstanceConstBase<Plan_Frame>
	{
		IInstanceMember* _mapFlag;
		IInstanceMember* _min_distance_to_global_route;
		IInstanceMember* _planned_dis_remain;
		IInstanceMember* _currentSpeed_ms;
		IInstanceMember* _currentSteer_deg;
		IInstanceMember* _static_obj;
		IInstanceMember* _moving_obj;
		IInstanceMember* _nearObs;
		IInstanceMember* _global_route;
		IInstanceMember* _history_path;
		IInstanceMember* _predict_path;
		IInstanceMember* _route_goal;
		IInstanceMember* _lane_goal;

	public: 
		CInstanceConst_Plan_Frame(const char* valueStr) : CInstanceConstBase<Plan_Frame>(valueStr)
		{
			behaviac::vector<behaviac::string> paramStrs = behaviac::StringUtils::SplitTokensForStruct(valueStr);
			BEHAVIAC_ASSERT(paramStrs.size() == 13);

			_mapFlag = AgentMeta::TParseProperty<MAPFlags >(paramStrs[0].c_str());
			_min_distance_to_global_route = AgentMeta::TParseProperty<double >(paramStrs[1].c_str());
			_planned_dis_remain = AgentMeta::TParseProperty<double >(paramStrs[2].c_str());
			_currentSpeed_ms = AgentMeta::TParseProperty<double >(paramStrs[3].c_str());
			_currentSteer_deg = AgentMeta::TParseProperty<double >(paramStrs[4].c_str());
			_static_obj = AgentMeta::TParseProperty<behaviac::vector<Static_Object> >(paramStrs[5].c_str());
			_moving_obj = AgentMeta::TParseProperty<behaviac::vector<Moving_Object> >(paramStrs[6].c_str());
			_nearObs = AgentMeta::TParseProperty<behaviac::vector<Dominator::Point2D> >(paramStrs[7].c_str());
			_global_route = AgentMeta::TParseProperty<behaviac::vector<Dominator::Point2D> >(paramStrs[8].c_str());
			_history_path = AgentMeta::TParseProperty<behaviac::vector<Dominator::Point2D> >(paramStrs[9].c_str());
			_predict_path = AgentMeta::TParseProperty<behaviac::vector<Dominator::Point2D> >(paramStrs[10].c_str());
			_route_goal = AgentMeta::TParseProperty<Goal >(paramStrs[11].c_str());
			_lane_goal = AgentMeta::TParseProperty<Goal >(paramStrs[12].c_str());
		}

		~CInstanceConst_Plan_Frame()
		{
			BEHAVIAC_DELETE _mapFlag;
			BEHAVIAC_DELETE _min_distance_to_global_route;
			BEHAVIAC_DELETE _planned_dis_remain;
			BEHAVIAC_DELETE _currentSpeed_ms;
			BEHAVIAC_DELETE _currentSteer_deg;
			BEHAVIAC_DELETE _static_obj;
			BEHAVIAC_DELETE _moving_obj;
			BEHAVIAC_DELETE _nearObs;
			BEHAVIAC_DELETE _global_route;
			BEHAVIAC_DELETE _history_path;
			BEHAVIAC_DELETE _predict_path;
			BEHAVIAC_DELETE _route_goal;
			BEHAVIAC_DELETE _lane_goal;
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_mapFlag != NULL);
			BEHAVIAC_ASSERT(_min_distance_to_global_route != NULL);
			BEHAVIAC_ASSERT(_planned_dis_remain != NULL);
			BEHAVIAC_ASSERT(_currentSpeed_ms != NULL);
			BEHAVIAC_ASSERT(_currentSteer_deg != NULL);
			BEHAVIAC_ASSERT(_static_obj != NULL);
			BEHAVIAC_ASSERT(_moving_obj != NULL);
			BEHAVIAC_ASSERT(_nearObs != NULL);
			BEHAVIAC_ASSERT(_global_route != NULL);
			BEHAVIAC_ASSERT(_history_path != NULL);
			BEHAVIAC_ASSERT(_predict_path != NULL);
			BEHAVIAC_ASSERT(_route_goal != NULL);
			BEHAVIAC_ASSERT(_lane_goal != NULL);

			_value.mapFlag = *(MAPFlags*)_mapFlag->GetValue(self, behaviac::Meta::IsVector<MAPFlags >::Result, behaviac::GetClassTypeNumberId<MAPFlags >());
			_value.min_distance_to_global_route = *(double*)_min_distance_to_global_route->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.planned_dis_remain = *(double*)_planned_dis_remain->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.currentSpeed_ms = *(double*)_currentSpeed_ms->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.currentSteer_deg = *(double*)_currentSteer_deg->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.static_obj = *(behaviac::vector<Static_Object>*)_static_obj->GetValue(self, behaviac::Meta::IsVector<behaviac::vector<Static_Object> >::Result, behaviac::GetClassTypeNumberId<behaviac::vector<Static_Object> >());
			_value.moving_obj = *(behaviac::vector<Moving_Object>*)_moving_obj->GetValue(self, behaviac::Meta::IsVector<behaviac::vector<Moving_Object> >::Result, behaviac::GetClassTypeNumberId<behaviac::vector<Moving_Object> >());
			_value.nearObs = *(behaviac::vector<Dominator::Point2D>*)_nearObs->GetValue(self, behaviac::Meta::IsVector<behaviac::vector<Dominator::Point2D> >::Result, behaviac::GetClassTypeNumberId<behaviac::vector<Dominator::Point2D> >());
			_value.global_route = *(behaviac::vector<Dominator::Point2D>*)_global_route->GetValue(self, behaviac::Meta::IsVector<behaviac::vector<Dominator::Point2D> >::Result, behaviac::GetClassTypeNumberId<behaviac::vector<Dominator::Point2D> >());
			_value.history_path = *(behaviac::vector<Dominator::Point2D>*)_history_path->GetValue(self, behaviac::Meta::IsVector<behaviac::vector<Dominator::Point2D> >::Result, behaviac::GetClassTypeNumberId<behaviac::vector<Dominator::Point2D> >());
			_value.predict_path = *(behaviac::vector<Dominator::Point2D>*)_predict_path->GetValue(self, behaviac::Meta::IsVector<behaviac::vector<Dominator::Point2D> >::Result, behaviac::GetClassTypeNumberId<behaviac::vector<Dominator::Point2D> >());
			_value.route_goal = (Goal*)_route_goal->GetValue(self, behaviac::Meta::IsVector<Goal >::Result, behaviac::GetClassTypeNumberId<Goal >());
			_value.lane_goal = (Goal*)_lane_goal->GetValue(self, behaviac::Meta::IsVector<Goal >::Result, behaviac::GetClassTypeNumberId<Goal >());
		}
	};

	class CInstanceConst_PlanConfig : public CInstanceConstBase<PlanConfig>
	{
		IInstanceMember* _frequency;
		IInstanceMember* _log_level;
		IInstanceMember* _plannner_type;
		IInstanceMember* _enable_avoidance;
		IInstanceMember* _V_width_half;
		IInstanceMember* _V_front;
		IInstanceMember* _V_back;
		IInstanceMember* _lat_safe_margin;
		IInstanceMember* _lon_safe_margin;
		IInstanceMember* _min_speed_threshold;
		IInstanceMember* _static_safe_front;
		IInstanceMember* _static_safe_back;
		IInstanceMember* _static_safe_side;
		IInstanceMember* _predict_time_interval;
		IInstanceMember* _predict_num;
		IInstanceMember* _expected_time;
		IInstanceMember* _max_acceleration;
		IInstanceMember* _axis_dis;
		IInstanceMember* _tyre_to_steer;
		IInstanceMember* _tyre_to_steer_right;
		IInstanceMember* _display_enabled;
		IInstanceMember* _myID;
		IInstanceMember* _follow_dis;

	public: 
		CInstanceConst_PlanConfig(const char* valueStr) : CInstanceConstBase<PlanConfig>(valueStr)
		{
			behaviac::vector<behaviac::string> paramStrs = behaviac::StringUtils::SplitTokensForStruct(valueStr);
			BEHAVIAC_ASSERT(paramStrs.size() == 23);

			_frequency = AgentMeta::TParseProperty<int >(paramStrs[0].c_str());
			_log_level = AgentMeta::TParseProperty<int >(paramStrs[1].c_str());
			_plannner_type = AgentMeta::TParseProperty<int >(paramStrs[2].c_str());
			_enable_avoidance = AgentMeta::TParseProperty<int >(paramStrs[3].c_str());
			_V_width_half = AgentMeta::TParseProperty<double >(paramStrs[4].c_str());
			_V_front = AgentMeta::TParseProperty<double >(paramStrs[5].c_str());
			_V_back = AgentMeta::TParseProperty<double >(paramStrs[6].c_str());
			_lat_safe_margin = AgentMeta::TParseProperty<double >(paramStrs[7].c_str());
			_lon_safe_margin = AgentMeta::TParseProperty<double >(paramStrs[8].c_str());
			_min_speed_threshold = AgentMeta::TParseProperty<double >(paramStrs[9].c_str());
			_static_safe_front = AgentMeta::TParseProperty<double >(paramStrs[10].c_str());
			_static_safe_back = AgentMeta::TParseProperty<double >(paramStrs[11].c_str());
			_static_safe_side = AgentMeta::TParseProperty<double >(paramStrs[12].c_str());
			_predict_time_interval = AgentMeta::TParseProperty<double >(paramStrs[13].c_str());
			_predict_num = AgentMeta::TParseProperty<int >(paramStrs[14].c_str());
			_expected_time = AgentMeta::TParseProperty<double >(paramStrs[15].c_str());
			_max_acceleration = AgentMeta::TParseProperty<double >(paramStrs[16].c_str());
			_axis_dis = AgentMeta::TParseProperty<double >(paramStrs[17].c_str());
			_tyre_to_steer = AgentMeta::TParseProperty<double >(paramStrs[18].c_str());
			_tyre_to_steer_right = AgentMeta::TParseProperty<double >(paramStrs[19].c_str());
			_display_enabled = AgentMeta::TParseProperty<int >(paramStrs[20].c_str());
			_myID = AgentMeta::TParseProperty<int >(paramStrs[21].c_str());
			_follow_dis = AgentMeta::TParseProperty<double >(paramStrs[22].c_str());
		}

		~CInstanceConst_PlanConfig()
		{
			BEHAVIAC_DELETE _frequency;
			BEHAVIAC_DELETE _log_level;
			BEHAVIAC_DELETE _plannner_type;
			BEHAVIAC_DELETE _enable_avoidance;
			BEHAVIAC_DELETE _V_width_half;
			BEHAVIAC_DELETE _V_front;
			BEHAVIAC_DELETE _V_back;
			BEHAVIAC_DELETE _lat_safe_margin;
			BEHAVIAC_DELETE _lon_safe_margin;
			BEHAVIAC_DELETE _min_speed_threshold;
			BEHAVIAC_DELETE _static_safe_front;
			BEHAVIAC_DELETE _static_safe_back;
			BEHAVIAC_DELETE _static_safe_side;
			BEHAVIAC_DELETE _predict_time_interval;
			BEHAVIAC_DELETE _predict_num;
			BEHAVIAC_DELETE _expected_time;
			BEHAVIAC_DELETE _max_acceleration;
			BEHAVIAC_DELETE _axis_dis;
			BEHAVIAC_DELETE _tyre_to_steer;
			BEHAVIAC_DELETE _tyre_to_steer_right;
			BEHAVIAC_DELETE _display_enabled;
			BEHAVIAC_DELETE _myID;
			BEHAVIAC_DELETE _follow_dis;
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_frequency != NULL);
			BEHAVIAC_ASSERT(_log_level != NULL);
			BEHAVIAC_ASSERT(_plannner_type != NULL);
			BEHAVIAC_ASSERT(_enable_avoidance != NULL);
			BEHAVIAC_ASSERT(_V_width_half != NULL);
			BEHAVIAC_ASSERT(_V_front != NULL);
			BEHAVIAC_ASSERT(_V_back != NULL);
			BEHAVIAC_ASSERT(_lat_safe_margin != NULL);
			BEHAVIAC_ASSERT(_lon_safe_margin != NULL);
			BEHAVIAC_ASSERT(_min_speed_threshold != NULL);
			BEHAVIAC_ASSERT(_static_safe_front != NULL);
			BEHAVIAC_ASSERT(_static_safe_back != NULL);
			BEHAVIAC_ASSERT(_static_safe_side != NULL);
			BEHAVIAC_ASSERT(_predict_time_interval != NULL);
			BEHAVIAC_ASSERT(_predict_num != NULL);
			BEHAVIAC_ASSERT(_expected_time != NULL);
			BEHAVIAC_ASSERT(_max_acceleration != NULL);
			BEHAVIAC_ASSERT(_axis_dis != NULL);
			BEHAVIAC_ASSERT(_tyre_to_steer != NULL);
			BEHAVIAC_ASSERT(_tyre_to_steer_right != NULL);
			BEHAVIAC_ASSERT(_display_enabled != NULL);
			BEHAVIAC_ASSERT(_myID != NULL);
			BEHAVIAC_ASSERT(_follow_dis != NULL);

			_value.frequency = *(int*)_frequency->GetValue(self, behaviac::Meta::IsVector<int >::Result, behaviac::GetClassTypeNumberId<int >());
			_value.log_level = *(int*)_log_level->GetValue(self, behaviac::Meta::IsVector<int >::Result, behaviac::GetClassTypeNumberId<int >());
			_value.plannner_type = *(int*)_plannner_type->GetValue(self, behaviac::Meta::IsVector<int >::Result, behaviac::GetClassTypeNumberId<int >());
			_value.enable_avoidance = *(int*)_enable_avoidance->GetValue(self, behaviac::Meta::IsVector<int >::Result, behaviac::GetClassTypeNumberId<int >());
			_value.V_width_half = *(double*)_V_width_half->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.V_front = *(double*)_V_front->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.V_back = *(double*)_V_back->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.lat_safe_margin = *(double*)_lat_safe_margin->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.lon_safe_margin = *(double*)_lon_safe_margin->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.min_speed_threshold = *(double*)_min_speed_threshold->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.static_safe_front = *(double*)_static_safe_front->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.static_safe_back = *(double*)_static_safe_back->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.static_safe_side = *(double*)_static_safe_side->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.predict_time_interval = *(double*)_predict_time_interval->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.predict_num = *(int*)_predict_num->GetValue(self, behaviac::Meta::IsVector<int >::Result, behaviac::GetClassTypeNumberId<int >());
			_value.expected_time = *(double*)_expected_time->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.max_acceleration = *(double*)_max_acceleration->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.axis_dis = *(double*)_axis_dis->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.tyre_to_steer = *(double*)_tyre_to_steer->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.tyre_to_steer_right = *(double*)_tyre_to_steer_right->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			_value.display_enabled = *(int*)_display_enabled->GetValue(self, behaviac::Meta::IsVector<int >::Result, behaviac::GetClassTypeNumberId<int >());
			_value.myID = *(int*)_myID->GetValue(self, behaviac::Meta::IsVector<int >::Result, behaviac::GetClassTypeNumberId<int >());
			_value.follow_dis = *(double*)_follow_dis->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
		}
	};

	class CMethod_behaviac_Agent_VectorAdd : public CAgentMethodVoidBase
	{
		IInstanceMember* _param0;
		IInstanceMember* _param1;

	public: 
		CMethod_behaviac_Agent_VectorAdd() : _param0(0) , _param1(0) 
		{
		}

		CMethod_behaviac_Agent_VectorAdd(CMethod_behaviac_Agent_VectorAdd &rhs) : CAgentMethodVoidBase(rhs) , _param0(0) , _param1(0) 
		{
		}

		~CMethod_behaviac_Agent_VectorAdd()
		{
			BEHAVIAC_DELETE _param0;
			BEHAVIAC_DELETE _param1;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_behaviac_Agent_VectorAdd(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 2);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_param0 = AgentMeta::TParseProperty<IList >(paramStrs[0].c_str());
			_param1 = AgentMeta::TParseProperty<System::Object >(paramStrs[1].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_param0 != NULL);
			BEHAVIAC_ASSERT(_param1 != NULL);

			IList& pValue_param0 = *(IList*)_param0->GetValue(self, behaviac::Meta::IsVector<IList >::Result, behaviac::GetClassTypeNumberId<IList >());
			System::Object& pValue_param1 = *(System::Object*)_param1->GetValue(self, behaviac::Meta::IsVector<System::Object >::Result, behaviac::GetClassTypeNumberId<System::Object >());
			behaviac::Agent::VectorAdd(pValue_param0, pValue_param1);
		}
	};

	class CMethod_behaviac_Agent_VectorClear : public CAgentMethodVoidBase
	{
		IInstanceMember* _param0;

	public: 
		CMethod_behaviac_Agent_VectorClear() : _param0(0) 
		{
		}

		CMethod_behaviac_Agent_VectorClear(CMethod_behaviac_Agent_VectorClear &rhs) : CAgentMethodVoidBase(rhs) , _param0(0) 
		{
		}

		~CMethod_behaviac_Agent_VectorClear()
		{
			BEHAVIAC_DELETE _param0;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_behaviac_Agent_VectorClear(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 1);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_param0 = AgentMeta::TParseProperty<IList >(paramStrs[0].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_param0 != NULL);

			IList& pValue_param0 = *(IList*)_param0->GetValue(self, behaviac::Meta::IsVector<IList >::Result, behaviac::GetClassTypeNumberId<IList >());
			behaviac::Agent::VectorClear(pValue_param0);
		}
	};

	class CMethod_behaviac_Agent_VectorContains : public CAgentMethodBase<bool>
	{
		IInstanceMember* _param0;
		IInstanceMember* _param1;

	public: 
		CMethod_behaviac_Agent_VectorContains() : _param0(0) , _param1(0) 
		{
		}

		CMethod_behaviac_Agent_VectorContains(CMethod_behaviac_Agent_VectorContains &rhs) : CAgentMethodBase<bool>(rhs) , _param0(0) , _param1(0) 
		{
		}

		~CMethod_behaviac_Agent_VectorContains()
		{
			BEHAVIAC_DELETE _param0;
			BEHAVIAC_DELETE _param1;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_behaviac_Agent_VectorContains(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 2);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_param0 = AgentMeta::TParseProperty<IList >(paramStrs[0].c_str());
			_param1 = AgentMeta::TParseProperty<System::Object >(paramStrs[1].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_param0 != NULL);
			BEHAVIAC_ASSERT(_param1 != NULL);

			IList& pValue_param0 = *(IList*)_param0->GetValue(self, behaviac::Meta::IsVector<IList >::Result, behaviac::GetClassTypeNumberId<IList >());
			System::Object& pValue_param1 = *(System::Object*)_param1->GetValue(self, behaviac::Meta::IsVector<System::Object >::Result, behaviac::GetClassTypeNumberId<System::Object >());
			_returnValue->value = behaviac::Agent::VectorContains(pValue_param0, pValue_param1);
		}
	};

	class CMethod_behaviac_Agent_VectorLength : public CAgentMethodBase<int>
	{
		IInstanceMember* _param0;

	public: 
		CMethod_behaviac_Agent_VectorLength() : _param0(0) 
		{
		}

		CMethod_behaviac_Agent_VectorLength(CMethod_behaviac_Agent_VectorLength &rhs) : CAgentMethodBase<int>(rhs) , _param0(0) 
		{
		}

		~CMethod_behaviac_Agent_VectorLength()
		{
			BEHAVIAC_DELETE _param0;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_behaviac_Agent_VectorLength(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 1);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_param0 = AgentMeta::TParseProperty<IList >(paramStrs[0].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_param0 != NULL);

			IList& pValue_param0 = *(IList*)_param0->GetValue(self, behaviac::Meta::IsVector<IList >::Result, behaviac::GetClassTypeNumberId<IList >());
			_returnValue->value = behaviac::Agent::VectorLength(pValue_param0);
		}
	};

	class CMethod_behaviac_Agent_VectorRemove : public CAgentMethodVoidBase
	{
		IInstanceMember* _param0;
		IInstanceMember* _param1;

	public: 
		CMethod_behaviac_Agent_VectorRemove() : _param0(0) , _param1(0) 
		{
		}

		CMethod_behaviac_Agent_VectorRemove(CMethod_behaviac_Agent_VectorRemove &rhs) : CAgentMethodVoidBase(rhs) , _param0(0) , _param1(0) 
		{
		}

		~CMethod_behaviac_Agent_VectorRemove()
		{
			BEHAVIAC_DELETE _param0;
			BEHAVIAC_DELETE _param1;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_behaviac_Agent_VectorRemove(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 2);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_param0 = AgentMeta::TParseProperty<IList >(paramStrs[0].c_str());
			_param1 = AgentMeta::TParseProperty<System::Object >(paramStrs[1].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_param0 != NULL);
			BEHAVIAC_ASSERT(_param1 != NULL);

			IList& pValue_param0 = *(IList*)_param0->GetValue(self, behaviac::Meta::IsVector<IList >::Result, behaviac::GetClassTypeNumberId<IList >());
			System::Object& pValue_param1 = *(System::Object*)_param1->GetValue(self, behaviac::Meta::IsVector<System::Object >::Result, behaviac::GetClassTypeNumberId<System::Object >());
			behaviac::Agent::VectorRemove(pValue_param0, pValue_param1);
		}
	};

	class CMethod_Agent_Dominant_is_on_planned_path : public CAgentMethodBase<bool>
	{
		IInstanceMember* _collsion_time;

	public: 
		CMethod_Agent_Dominant_is_on_planned_path() : _collsion_time(0) 
		{
		}

		CMethod_Agent_Dominant_is_on_planned_path(CMethod_Agent_Dominant_is_on_planned_path &rhs) : CAgentMethodBase<bool>(rhs) , _collsion_time(0) 
		{
		}

		~CMethod_Agent_Dominant_is_on_planned_path()
		{
			BEHAVIAC_DELETE _collsion_time;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_Agent_Dominant_is_on_planned_path(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 1);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_collsion_time = AgentMeta::TParseProperty<double >(paramStrs[0].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_collsion_time != NULL);

			double& pValue_collsion_time = *(double*)_collsion_time->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			self = Agent::GetParentAgent(self, _instance);

			_returnValue->value = ((Agent_Dominant*)self)->is_on_planned_path(pValue_collsion_time);
		}
	};

	class CMethod_Agent_Dominant_is_on_predict_path : public CAgentMethodBase<bool>
	{
		IInstanceMember* _collision_time;

	public: 
		CMethod_Agent_Dominant_is_on_predict_path() : _collision_time(0) 
		{
		}

		CMethod_Agent_Dominant_is_on_predict_path(CMethod_Agent_Dominant_is_on_predict_path &rhs) : CAgentMethodBase<bool>(rhs) , _collision_time(0) 
		{
		}

		~CMethod_Agent_Dominant_is_on_predict_path()
		{
			BEHAVIAC_DELETE _collision_time;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_Agent_Dominant_is_on_predict_path(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 1);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_collision_time = AgentMeta::TParseProperty<double >(paramStrs[0].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_collision_time != NULL);

			double& pValue_collision_time = *(double*)_collision_time->GetValue(self, behaviac::Meta::IsVector<double >::Result, behaviac::GetClassTypeNumberId<double >());
			self = Agent::GetParentAgent(self, _instance);

			_returnValue->value = ((Agent_Dominant*)self)->is_on_predict_path(pValue_collision_time);
		}
	};

	class BehaviorLoaderImplement : BehaviorLoader
	{
	public:
		BehaviorLoaderImplement()
		{
			AgentMeta::SetBehaviorLoader(this);
		}

		virtual ~BehaviorLoaderImplement()
		{
		}

		virtual bool load()
		{
			AgentMeta::SetTotalSignature(4041371557u);

			AgentMeta* meta = NULL;
			BEHAVIAC_UNUSED_VAR(meta);

			// Static_Object
			meta = BEHAVIAC_NEW AgentMeta(4206655322u);
			AgentMeta::GetAgentMetas()[1627618017u] = meta;
			meta->RegisterMemberProperty(1109823350u, BEHAVIAC_NEW CMemberProperty< Object_Type >("type_", Set_Static_Object_type_, Get_Static_Object_type_));
			meta->RegisterMemberProperty(3790609017u, BEHAVIAC_NEW CMemberProperty< double >("length", Set_Static_Object_length, Get_Static_Object_length));
			meta->RegisterMemberProperty(4140483553u, BEHAVIAC_NEW CMemberProperty< double >("width", Set_Static_Object_width, Get_Static_Object_width));
			meta->RegisterMemberProperty(3853835016u, BEHAVIAC_NEW CMemberProperty< double >("hight", Set_Static_Object_hight, Get_Static_Object_hight));
			meta->RegisterMemberProperty(784805480u, BEHAVIAC_NEW CMemberProperty< double >("x", Set_Static_Object_x, Get_Static_Object_x));
			meta->RegisterMemberProperty(937172777u, BEHAVIAC_NEW CMemberProperty< double >("y", Set_Static_Object_y, Get_Static_Object_y));

			// Moving_Object
			meta = BEHAVIAC_NEW AgentMeta(1338255810u);
			AgentMeta::GetAgentMetas()[1027001790u] = meta;
			meta->RegisterMemberProperty(1495965917u, BEHAVIAC_NEW CMemberProperty< double >("vx", Set_Moving_Object_vx, Get_Moving_Object_vx));
			meta->RegisterMemberProperty(1076990364u, BEHAVIAC_NEW CMemberProperty< double >("vy", Set_Moving_Object_vy, Get_Moving_Object_vy));
			meta->RegisterMemberProperty(3835743301u, BEHAVIAC_NEW CMemberProperty< double >("relative_vx", Set_Moving_Object_relative_vx, Get_Moving_Object_relative_vx));
			meta->RegisterMemberProperty(4256955652u, BEHAVIAC_NEW CMemberProperty< double >("relative_vy", Set_Moving_Object_relative_vy, Get_Moving_Object_relative_vy));
			meta->RegisterMemberProperty(1109823350u, BEHAVIAC_NEW CMemberProperty< Object_Type >("type_", Set_Static_Object_type_, Get_Static_Object_type_));
			meta->RegisterMemberProperty(3790609017u, BEHAVIAC_NEW CMemberProperty< double >("length", Set_Static_Object_length, Get_Static_Object_length));
			meta->RegisterMemberProperty(4140483553u, BEHAVIAC_NEW CMemberProperty< double >("width", Set_Static_Object_width, Get_Static_Object_width));
			meta->RegisterMemberProperty(3853835016u, BEHAVIAC_NEW CMemberProperty< double >("hight", Set_Static_Object_hight, Get_Static_Object_hight));
			meta->RegisterMemberProperty(784805480u, BEHAVIAC_NEW CMemberProperty< double >("x", Set_Static_Object_x, Get_Static_Object_x));
			meta->RegisterMemberProperty(937172777u, BEHAVIAC_NEW CMemberProperty< double >("y", Set_Static_Object_y, Get_Static_Object_y));

			// Goal
			meta = BEHAVIAC_NEW AgentMeta(2299133089u);
			AgentMeta::GetAgentMetas()[930818635u] = meta;
			meta->RegisterMemberProperty(784805480u, BEHAVIAC_NEW CMemberProperty< double >("x", Set_Goal_x, Get_Goal_x));
			meta->RegisterMemberProperty(937172777u, BEHAVIAC_NEW CMemberProperty< double >("y", Set_Goal_y, Get_Goal_y));
			meta->RegisterMemberProperty(608191699u, BEHAVIAC_NEW CMemberProperty< double >("theta", Set_Goal_theta, Get_Goal_theta));

			// Plan_Frame
			meta = BEHAVIAC_NEW AgentMeta(1060089804u);
			AgentMeta::GetAgentMetas()[488648142u] = meta;
			meta->RegisterMemberProperty(2891903978u, BEHAVIAC_NEW CMemberProperty< MAPFlags >("mapFlag", Set_Plan_Frame_mapFlag, Get_Plan_Frame_mapFlag));
			meta->RegisterMemberProperty(1224166064u, BEHAVIAC_NEW CMemberProperty< double >("min_distance_to_global_route", Set_Plan_Frame_min_distance_to_global_route, Get_Plan_Frame_min_distance_to_global_route));
			meta->RegisterMemberProperty(1794991935u, BEHAVIAC_NEW CMemberProperty< double >("planned_dis_remain", Set_Plan_Frame_planned_dis_remain, Get_Plan_Frame_planned_dis_remain));
			meta->RegisterMemberProperty(3876086845u, BEHAVIAC_NEW CMemberProperty< double >("currentSpeed_ms", Set_Plan_Frame_currentSpeed_ms, Get_Plan_Frame_currentSpeed_ms));
			meta->RegisterMemberProperty(98342268u, BEHAVIAC_NEW CMemberProperty< double >("currentSteer_deg", Set_Plan_Frame_currentSteer_deg, Get_Plan_Frame_currentSteer_deg));
			meta->RegisterMemberProperty(314895230u, BEHAVIAC_NEW CMemberProperty< behaviac::vector<Static_Object> >("static_obj", Set_Plan_Frame_static_obj, Get_Plan_Frame_static_obj));
			meta->RegisterMemberProperty(1076038006u, BEHAVIAC_NEW CMemberProperty< behaviac::vector<Moving_Object> >("moving_obj", Set_Plan_Frame_moving_obj, Get_Plan_Frame_moving_obj));
			meta->RegisterMemberProperty(3571087038u, BEHAVIAC_NEW CMemberProperty< behaviac::vector<Dominator::Point2D> >("nearObs", Set_Plan_Frame_nearObs, Get_Plan_Frame_nearObs));
			meta->RegisterMemberProperty(3791733937u, BEHAVIAC_NEW CMemberProperty< behaviac::vector<Dominator::Point2D> >("global_route", Set_Plan_Frame_global_route, Get_Plan_Frame_global_route));
			meta->RegisterMemberProperty(3980860708u, BEHAVIAC_NEW CMemberProperty< behaviac::vector<Dominator::Point2D> >("history_path", Set_Plan_Frame_history_path, Get_Plan_Frame_history_path));
			meta->RegisterMemberProperty(3187181566u, BEHAVIAC_NEW CMemberProperty< behaviac::vector<Dominator::Point2D> >("predict_path", Set_Plan_Frame_predict_path, Get_Plan_Frame_predict_path));
			meta->RegisterMemberProperty(2357009126u, BEHAVIAC_NEW CMemberProperty< Goal* >("route_goal", Set_Plan_Frame_route_goal, Get_Plan_Frame_route_goal));
			meta->RegisterMemberProperty(3428318313u, BEHAVIAC_NEW CMemberProperty< Goal* >("lane_goal", Set_Plan_Frame_lane_goal, Get_Plan_Frame_lane_goal));

			// Dominator::Point2D
			meta = BEHAVIAC_NEW AgentMeta(2813757440u);
			AgentMeta::GetAgentMetas()[1827212290u] = meta;
			meta->RegisterMemberProperty(784805480u, BEHAVIAC_NEW CMemberProperty< double >("x", Set_Dominator_Point2D_x, Get_Dominator_Point2D_x));
			meta->RegisterMemberProperty(937172777u, BEHAVIAC_NEW CMemberProperty< double >("y", Set_Dominator_Point2D_y, Get_Dominator_Point2D_y));

			// PlanConfig
			meta = BEHAVIAC_NEW AgentMeta(3296870262u);
			AgentMeta::GetAgentMetas()[2416248814u] = meta;
			meta->RegisterMemberProperty(3501823664u, BEHAVIAC_NEW CMemberProperty< int >("frequency", Set_PlanConfig_frequency, Get_PlanConfig_frequency));
			meta->RegisterMemberProperty(3321843814u, BEHAVIAC_NEW CMemberProperty< int >("log_level", Set_PlanConfig_log_level, Get_PlanConfig_log_level));
			meta->RegisterMemberProperty(2352173725u, BEHAVIAC_NEW CMemberProperty< int >("plannner_type", Set_PlanConfig_plannner_type, Get_PlanConfig_plannner_type));
			meta->RegisterMemberProperty(4161490290u, BEHAVIAC_NEW CMemberProperty< int >("enable_avoidance", Set_PlanConfig_enable_avoidance, Get_PlanConfig_enable_avoidance));
			meta->RegisterMemberProperty(3505395104u, BEHAVIAC_NEW CMemberProperty< double >("V_width_half", Set_PlanConfig_V_width_half, Get_PlanConfig_V_width_half));
			meta->RegisterMemberProperty(1972188239u, BEHAVIAC_NEW CMemberProperty< double >("V_front", Set_PlanConfig_V_front, Get_PlanConfig_V_front));
			meta->RegisterMemberProperty(2598211653u, BEHAVIAC_NEW CMemberProperty< double >("V_back", Set_PlanConfig_V_back, Get_PlanConfig_V_back));
			meta->RegisterMemberProperty(263440230u, BEHAVIAC_NEW CMemberProperty< double >("lat_safe_margin", Set_PlanConfig_lat_safe_margin, Get_PlanConfig_lat_safe_margin));
			meta->RegisterMemberProperty(1447377380u, BEHAVIAC_NEW CMemberProperty< double >("lon_safe_margin", Set_PlanConfig_lon_safe_margin, Get_PlanConfig_lon_safe_margin));
			meta->RegisterMemberProperty(691020035u, BEHAVIAC_NEW CMemberProperty< double >("min_speed_threshold", Set_PlanConfig_min_speed_threshold, Get_PlanConfig_min_speed_threshold));
			meta->RegisterMemberProperty(246966013u, BEHAVIAC_NEW CMemberProperty< double >("static_safe_front", Set_PlanConfig_static_safe_front, Get_PlanConfig_static_safe_front));
			meta->RegisterMemberProperty(3933223368u, BEHAVIAC_NEW CMemberProperty< double >("static_safe_back", Set_PlanConfig_static_safe_back, Get_PlanConfig_static_safe_back));
			meta->RegisterMemberProperty(3918042142u, BEHAVIAC_NEW CMemberProperty< double >("static_safe_side", Set_PlanConfig_static_safe_side, Get_PlanConfig_static_safe_side));
			meta->RegisterMemberProperty(3906984342u, BEHAVIAC_NEW CMemberProperty< double >("predict_time_interval", Set_PlanConfig_predict_time_interval, Get_PlanConfig_predict_time_interval));
			meta->RegisterMemberProperty(2703708166u, BEHAVIAC_NEW CMemberProperty< int >("predict_num", Set_PlanConfig_predict_num, Get_PlanConfig_predict_num));
			meta->RegisterMemberProperty(586770192u, BEHAVIAC_NEW CMemberProperty< double >("expected_time", Set_PlanConfig_expected_time, Get_PlanConfig_expected_time));
			meta->RegisterMemberProperty(2135222370u, BEHAVIAC_NEW CMemberProperty< double >("max_acceleration", Set_PlanConfig_max_acceleration, Get_PlanConfig_max_acceleration));
			meta->RegisterMemberProperty(4245415980u, BEHAVIAC_NEW CMemberProperty< double >("axis_dis", Set_PlanConfig_axis_dis, Get_PlanConfig_axis_dis));
			meta->RegisterMemberProperty(2427116829u, BEHAVIAC_NEW CMemberProperty< double >("tyre_to_steer", Set_PlanConfig_tyre_to_steer, Get_PlanConfig_tyre_to_steer));
			meta->RegisterMemberProperty(1488061018u, BEHAVIAC_NEW CMemberProperty< double >("tyre_to_steer_right", Set_PlanConfig_tyre_to_steer_right, Get_PlanConfig_tyre_to_steer_right));
			meta->RegisterMemberProperty(808261199u, BEHAVIAC_NEW CMemberProperty< int >("display_enabled", Set_PlanConfig_display_enabled, Get_PlanConfig_display_enabled));
			meta->RegisterMemberProperty(2726014047u, BEHAVIAC_NEW CMemberProperty< int >("myID", Set_PlanConfig_myID, Get_PlanConfig_myID));
			meta->RegisterMemberProperty(4160323694u, BEHAVIAC_NEW CMemberProperty< double >("follow_dis", Set_PlanConfig_follow_dis, Get_PlanConfig_follow_dis));

			// behaviac::Agent
			meta = BEHAVIAC_NEW AgentMeta(24743406u);
			AgentMeta::GetAgentMetas()[1770892321u] = meta;
			meta->RegisterMethod(1045109914u, BEHAVIAC_NEW CAgentStaticMethodVoid_1<char*>(FunctionPointer_behaviac_Agent_LogMessage));
			meta->RegisterMethod(2521019022u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorAdd());
			meta->RegisterMethod(2306090221u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorClear());
			meta->RegisterMethod(3483755530u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorContains());
			meta->RegisterMethod(505785840u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorLength());
			meta->RegisterMethod(502968959u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorRemove());

			// Agent_Dominant
			meta = BEHAVIAC_NEW AgentMeta(1855170756u);
			AgentMeta::GetAgentMetas()[1651699381u] = meta;
			meta->RegisterMemberProperty(2026083569u, BEHAVIAC_NEW CMemberProperty< LaneIdx >("currentLane", Set_Agent_Dominant_currentLane, Get_Agent_Dominant_currentLane));
			meta->RegisterMemberProperty(655194801u, BEHAVIAC_NEW CMemberProperty< DriveState >("currentState", Set_Agent_Dominant_currentState, Get_Agent_Dominant_currentState));
			meta->RegisterMemberProperty(1862905536u, BEHAVIAC_NEW CMemberProperty< Plan_Frame >("environment", Set_Agent_Dominant_environment, Get_Agent_Dominant_environment));
			meta->RegisterMemberProperty(2436026145u, BEHAVIAC_NEW CMemberProperty< DriveState >("lastState", Set_Agent_Dominant_lastState, Get_Agent_Dominant_lastState));
			meta->RegisterMemberProperty(3213681942u, BEHAVIAC_NEW CMemberProperty< DriveState >("m5Gstate", Set_Agent_Dominant_m5Gstate, Get_Agent_Dominant_m5Gstate));
			meta->RegisterMemberProperty(705457290u, BEHAVIAC_NEW CMemberProperty< double >("min_collision_time", Set_Agent_Dominant_min_collision_time, Get_Agent_Dominant_min_collision_time));
			meta->RegisterMemberProperty(379160633u, BEHAVIAC_NEW CMemberProperty< PlanConfig >("planConfig", Set_Agent_Dominant_planConfig, Get_Agent_Dominant_planConfig));
			meta->RegisterMemberProperty(372337581u, BEHAVIAC_NEW CMemberProperty< System_Status >("systemStatus", Set_Agent_Dominant_systemStatus, Get_Agent_Dominant_systemStatus));
			meta->RegisterMethod(358986303u, BEHAVIAC_NEW CAgentMethod< behaviac::EBTStatus >(FunctionPointer_Agent_Dominant_Action));
			meta->RegisterMethod(1045969879u, BEHAVIAC_NEW CAgentMethod< behaviac::EBTStatus >(FunctionPointer_Agent_Dominant_Avoidance));
			meta->RegisterMethod(4107562175u, BEHAVIAC_NEW CAgentMethod< behaviac::EBTStatus >(FunctionPointer_Agent_Dominant_ChangingLane));
			meta->RegisterMethod(3259177254u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_collision_time_feasibleforchange));
			meta->RegisterMethod(1465477427u, BEHAVIAC_NEW CAgentMethod< behaviac::EBTStatus >(FunctionPointer_Agent_Dominant_Estop));
			meta->RegisterMethod(1495430710u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_Agent_Dominant_find_5G_EstopSpeed));
			meta->RegisterMethod(3596665809u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_find_5G_FollowingPath));
			meta->RegisterMethod(144379986u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_Agent_Dominant_find_5G_FollowingSpeed));
			meta->RegisterMethod(1972618558u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_find_advice_speed));
			meta->RegisterMethod(1782128428u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_find_change_path));
			meta->RegisterMethod(785648226u, BEHAVIAC_NEW CAgentMethod< behaviac::EBTStatus >(FunctionPointer_Agent_Dominant_FollowingFrontCar));
			meta->RegisterMethod(2779404058u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_Agent_Dominant_HandleFrame));
			meta->RegisterMethod(2378223817u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_I_need_to_changelane));
			meta->RegisterMethod(3715636112u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_I_want_to_changlane));
			meta->RegisterMethod(2677104054u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_Im_able_to_changelane));
			meta->RegisterMethod(928668632u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_is_5G_Event));
			meta->RegisterMethod(3697970971u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_is_5G_Front_Car));
			meta->RegisterMethod(2593613016u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_is_change_finished));
			meta->RegisterMethod(1715755406u, BEHAVIAC_NEW CMethod_Agent_Dominant_is_on_planned_path());
			meta->RegisterMethod(3779493031u, BEHAVIAC_NEW CMethod_Agent_Dominant_is_on_predict_path());
			meta->RegisterMethod(2066062694u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_is_other_lane));
			meta->RegisterMethod(2553822149u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_is_other_lane_free));
			meta->RegisterMethod(3147858049u, BEHAVIAC_NEW CAgentMethod_1< bool, double >(FunctionPointer_Agent_Dominant_is_speed_lower_than));
			meta->RegisterMethod(620492724u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_is_stopline_close));
			meta->RegisterMethod(3366112544u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_is_traffice_red));
			meta->RegisterMethod(2140342259u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_isEstop));
			meta->RegisterMethod(2027860357u, BEHAVIAC_NEW CAgentMethod_1< bool, double >(FunctionPointer_Agent_Dominant_isPathRunout));
			meta->RegisterMethod(1045109914u, BEHAVIAC_NEW CAgentStaticMethodVoid_1<char*>(FunctionPointer_Agent_Dominant_LogMessage));
			meta->RegisterMethod(3042982998u, BEHAVIAC_NEW CAgentMethod< behaviac::EBTStatus >(FunctionPointer_Agent_Dominant_Move));
			meta->RegisterMethod(2462009074u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_Agent_Dominant_no_collision_or_collision_far_away));
			meta->RegisterMethod(76900393u, BEHAVIAC_NEW CAgentMethod< System_Status >(FunctionPointer_Agent_Dominant_System_Check));
			meta->RegisterMethod(3044948686u, BEHAVIAC_NEW CAgentMethod< behaviac::EBTStatus >(FunctionPointer_Agent_Dominant_Tracking));
			meta->RegisterMethod(3360010500u, BEHAVIAC_NEW CAgentMethod< behaviac::EBTStatus >(FunctionPointer_Agent_Dominant_TrackingLane));
			meta->RegisterMethod(2521019022u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorAdd());
			meta->RegisterMethod(2306090221u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorClear());
			meta->RegisterMethod(3483755530u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorContains());
			meta->RegisterMethod(505785840u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorLength());
			meta->RegisterMethod(502968959u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorRemove());

			AgentMeta::Register<behaviac::Agent>("behaviac::Agent");
			AgentMeta::Register<Agent_Dominant>("Agent_Dominant");
			AgentMeta::Register<DriveState>("DriveState");
			AgentMeta::Register<System_Status>("System_Status");
			AgentMeta::Register<LaneIdx>("LaneIdx");
			AgentMeta::Register<MAPFlags>("MAPFlags");
			AgentMeta::Register<Object_Type>("Object_Type");
			AgentMeta::Register<Static_Object>("Static_Object");
			AgentMeta::Register<Moving_Object>("Moving_Object");
			AgentMeta::Register<Goal>("Goal");
			AgentMeta::Register<Plan_Frame>("Plan_Frame");
			AgentMeta::Register<Dominator::Point2D>("Dominator::Point2D");
			AgentMeta::Register<PlanConfig>("PlanConfig");

			return true;
		}

		virtual bool unLoad()
		{
			AgentMeta::UnRegister<behaviac::Agent>("behaviac::Agent");
			AgentMeta::UnRegister<Agent_Dominant>("Agent_Dominant");
			AgentMeta::UnRegister<DriveState>("DriveState");
			AgentMeta::UnRegister<System_Status>("System_Status");
			AgentMeta::UnRegister<LaneIdx>("LaneIdx");
			AgentMeta::UnRegister<MAPFlags>("MAPFlags");
			AgentMeta::UnRegister<Object_Type>("Object_Type");
			AgentMeta::UnRegister<Static_Object>("Static_Object");
			AgentMeta::UnRegister<Moving_Object>("Moving_Object");
			AgentMeta::UnRegister<Goal>("Goal");
			AgentMeta::UnRegister<Plan_Frame>("Plan_Frame");
			AgentMeta::UnRegister<Dominator::Point2D>("Dominator::Point2D");
			AgentMeta::UnRegister<PlanConfig>("PlanConfig");

			return true;
		}
	};

	static BehaviorLoaderImplement _behaviorLoaderImplement_;

	static BehaviorLoaderImplement* _pBehaviorLoader_ = NULL;

	void InitBehaviorLoader()
	{
		_pBehaviorLoader_ = BEHAVIAC_NEW BehaviorLoaderImplement();
	}

	void DestroyBehaviorLoader()
	{
		if (_pBehaviorLoader_)
		{
			BEHAVIAC_DELETE _pBehaviorLoader_;
			_pBehaviorLoader_ = NULL;
		}
	}
}
